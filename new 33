package com.gsc.sample;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class Config{

	public static void main(String[] args) {
		 File file = new File("config.xml");
		    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		    DocumentBuilder dBuilder;
		    BufferedReader br;
		    String inputSearch = "pipeline_template=pipeline_template.groovy";
		    String line = "";
		    double count = 0,countBuffer=0,countLine=0;
		    String lineNumber = "";
		
				try {
					dBuilder = dbFactory.newDocumentBuilder();
				
			
		    Document doc = dBuilder.parse(file);
		    doc.getDocumentElement().normalize();

		    System.out.println(doc.getDocumentElement().getNodeName());
		    NodeList nodes = doc.getElementsByTagName("info");

		    for (int i = 0; i < nodes.getLength(); i++) {
		      Node node = nodes.item(i);
		      if (node.getNodeType() == Node.ELEMENT_NODE) {
		     
		        Element element = (Element) node;
		        //System.out.println("Value " + getValue("propertiesContent", element));
		       // System.out.println("Value1 " + getValue("pipeline_template=pipeline_template.groovy", element));
		        
		        String Value =  getValue("propertiesContent", element);
		        System.out.println(Value);
		      
		            br = new BufferedReader(new FileReader(Value));
		          
		                while((line = br.readLine()) != null)
		                {
		                    countLine++;
		                    //System.out.println(line);
		                    String[] words = line.split(" ");

		                    for (String word : words) {
		                      if (word.equals(inputSearch)) {
		                        count++;
		                        countBuffer++;
		                      }
		                    }

		                    if(countBuffer > 0)
		                    {
		                        countBuffer = 0;
		                        lineNumber += countLine + ",";
		                    }

		                }
		                br.close();
		      }
		    }
				}
				catch (IOException e) {
		            // TODO Auto-generated catch block
		            e.printStackTrace();
		        } catch (ParserConfigurationException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SAXException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    }

	
		  static String getValue(String tag, Element element) {
		    NodeList nodes = element.getElementsByTagName(tag).item(0).getChildNodes();
		    Node node = (Node) nodes.item(0);
		    return node.getNodeValue();
		  }
}
